package edu.psgv.sweng861;

import java.awt.EventQueue;
import java.awt.Image;

import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.event.ActionEvent;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JTextArea;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.Font;
import java.awt.Color;


public class SpotifyRestApiProject {

	private JFrame spotifyFrame;
	private JTextField userInputText;
	private DefaultListModel<String> listModel;
	private JTextArea resultInfo;
	private JLabel resultPicture;
	private final ButtonGroup chooseTypeOfInput = new ButtonGroup();

	private SpotifyRestRequester apiDataHandler = new SpotifyRestRequester();
	private SpotifyArtistData artistsInfo;
	private SpotifyTrackData tracksInfo;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SpotifyRestApiProject window = new SpotifyRestApiProject();
					window.spotifyFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public SpotifyRestApiProject() {
		initialize();
	}

	class ButtonAction implements ActionListener {

		String inputType, inputText;

		@Override
		public void actionPerformed(ActionEvent e) {
			inputType = chooseTypeOfInput.getSelection().getActionCommand();
			inputText = userInputText.getText();
			if (inputText.equals("")) {
				JOptionPane.showMessageDialog(spotifyFrame, "Please enter a name of a song/artist");
				return;
			}
			listModel.clear();
			if (inputType.equals("Artist")) {
				artistsInfo = apiDataHandler.searchArtist(inputText);
				if (artistsInfo.getArtistNames().isEmpty()) {
					JOptionPane.showMessageDialog(spotifyFrame, "Name yielded no results.\nPlease enter in another one.");
					return;
				}
				for (String artistNames : artistsInfo.getArtistNames())
					listModel.addElement(artistNames);
			} else {
				tracksInfo = apiDataHandler.searchSong(inputText);
				if (tracksInfo.getTrackNames().isEmpty()) {
					JOptionPane.showMessageDialog(spotifyFrame, "Name yielded no results.\nPlease enter in another one.");
					return;
				}
				for (String trackNames : tracksInfo.getTrackNames())
					listModel.addElement(trackNames);
			}
		}

	}

	class ListAction implements ListSelectionListener {
		
		private String convertFromMs(int lengthMs) {
			String newLength = String.format("%02d:%02d:%02d", 
					TimeUnit.MILLISECONDS.toHours(lengthMs),
					TimeUnit.MILLISECONDS.toMinutes(lengthMs) -  
					TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(lengthMs)),
					TimeUnit.MILLISECONDS.toSeconds(lengthMs) - 
					TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(lengthMs)));   
			return newLength;
		}
		
		private ImageIcon setCorrectImageDimen(BufferedImage img) {
			Image correctDimen = new ImageIcon(img).getImage().getScaledInstance(252, 252, Image.SCALE_DEFAULT);
			return new ImageIcon(correctDimen);
		}
		
		private void insertArtistInfo(String name, int index) {
			resultInfo.append("Artist Name: " + name + "\n");
			if (!artistsInfo.getArtistGenres().get(index).isEmpty())
				resultInfo.append("Genres: " + String.join(", ", artistsInfo.getArtistGenres().get(index)) + "\n");
			String topTrack = artistsInfo.getArtistTopTracks().get(index);
			if (topTrack != null)
				resultInfo.append("Top Song: " + topTrack + "\n");
			ArrayList<String> relatedArtists = artistsInfo.getArtistRelatedArtists().get(index);
			if (!relatedArtists.isEmpty()) {
				int maxArtists = (relatedArtists.size() > 3) ? 3 : relatedArtists.size();
				ArrayList<String> artistRelatedArtists = new ArrayList<>();
				for (int i = 0; i < maxArtists; i++)
					artistRelatedArtists.add(artistsInfo.getArtistRelatedArtists().get(index).get(i));
				resultInfo.append("Related Artists: " + String.join(", ", artistRelatedArtists) + "\n");
			}
			resultInfo.append("Followers: " + artistsInfo.getArtistFollowers().get(index) + "\n");
			resultInfo.append("Artist Popularity: " + artistsInfo.getArtistPopularities().get(index) + "\n");
			BufferedImage artistImg = artistsInfo.getArtistImages().get(index);
			if (artistImg != null)
				resultPicture.setIcon(setCorrectImageDimen(artistImg));
		}
		
		private void insertTrackInfo(String name, int index) {
			resultInfo.append("Song Name: " + name + "\n");
			resultInfo.append("Album Name: " + tracksInfo.getTrackAlbums().get(index).toString() + "\n");
			resultInfo.append("Album Release Date: " + tracksInfo.getTrackAlbumReleaseDates().get(index) + "\n");
			if (!tracksInfo.getTrackArtists().get(index).isEmpty())
				resultInfo.append("Artists Involved: " + String.join(", ", tracksInfo.getTrackArtists().get(index)) + "\n");
			String trackLength = convertFromMs(tracksInfo.getTrackLengths().get(index));
			resultInfo.append("Length: " + trackLength + "\n");
			resultInfo.append("Explicit?: " + tracksInfo.getTrackExplicits().get(index) + "\n");
			resultInfo.append("Disc Number: " + tracksInfo.getTrackDiscNumbers().get(index) + "\n");
			resultInfo.append("Track Number: " + tracksInfo.getTrackTrkNumbers().get(index) + "\n");
			resultInfo.append("Track Popularity: " + tracksInfo.getTrackPopularities().get(index) + "\n");
			BufferedImage trackImg = tracksInfo.getTrackAlbumImages().get(index);
			if (trackImg != null)
				resultPicture.setIcon(setCorrectImageDimen(trackImg));
		}

		@Override
		public void valueChanged(ListSelectionEvent e) {
			resultInfo.setText("");
			resultPicture.setIcon(null);
			@SuppressWarnings("unchecked")
			JList<String> sourceList = (JList<String>) e.getSource();
			int index = sourceList.getSelectedIndex();
			if (index != -1) {
				String selectedName = listModel.getElementAt(index);
				String inputType = chooseTypeOfInput.getSelection().getActionCommand();
				if (inputType.equals("Artist")) {
					insertArtistInfo(selectedName, index);
				} else {
					insertTrackInfo(selectedName, index);
				}
			}
		}

	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		spotifyFrame = new JFrame();
		spotifyFrame.setTitle("Spotify Retrieve Information");
		spotifyFrame.setBounds(100, 100, 700, 500);
		spotifyFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		spotifyFrame.getContentPane().setLayout(null);
		
		JButton submitInputButton = new JButton("Get Results");
		submitInputButton.addActionListener(new ButtonAction());
		submitInputButton.setBounds(195, 73, 112, 30);
		spotifyFrame.getContentPane().add(submitInputButton);

		userInputText = new JTextField(); 
		userInputText.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if(e.getKeyCode() == KeyEvent.VK_ENTER){
					submitInputButton.doClick();
	            }
			}
		});
		userInputText.setToolTipText("Enter in an artist or song");
		userInputText.setBounds(27, 21, 280, 39);
		spotifyFrame.getContentPane().add(userInputText);
		userInputText.setColumns(10);

		JRadioButton chooseArtist = new JRadioButton("Artist");
		chooseArtist.setSelected(true);
		chooseArtist.setActionCommand("Artist");
		chooseTypeOfInput.add(chooseArtist);
		chooseArtist.setHorizontalAlignment(SwingConstants.CENTER);
		chooseArtist.setBounds(27, 77, 80, 23);
		spotifyFrame.getContentPane().add(chooseArtist);

		JRadioButton chooseTrack = new JRadioButton("Song");
		chooseTrack.setActionCommand("Song");
		chooseTypeOfInput.add(chooseTrack);
		chooseTrack.setHorizontalAlignment(SwingConstants.CENTER);
		chooseTrack.setBounds(109, 77, 80, 23);
		spotifyFrame.getContentPane().add(chooseTrack);

		listModel = new DefaultListModel<>();
		JList<String> listOfNames = new JList<>(listModel);
		listOfNames.setFont(new Font("Tahoma", Font.PLAIN, 12));
		listOfNames.addListSelectionListener(new ListAction());
		listOfNames.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		listOfNames.setBounds(338, 11, 336, 124);
		spotifyFrame.getContentPane().add(listOfNames);

		resultInfo = new JTextArea();
		resultInfo.setFont(new Font("Monospaced", Font.PLAIN, 14));
		resultInfo.setWrapStyleWord(true);
		resultInfo.setLineWrap(true);
		resultInfo.setEditable(false);
		resultInfo.setBounds(338, 170, 336, 280);
		spotifyFrame.getContentPane().add(resultInfo);

		resultPicture = new JLabel("");
		resultPicture.setBounds(28, 170, 252, 252);
		spotifyFrame.getContentPane().add(resultPicture);
	}
}
