package edu.psgv.sweng861;

import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.special.SearchResult;
import com.wrapper.spotify.requests.data.search.SearchItemRequest;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.Paging;
import org.apache.hc.core5.http.ParseException;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import java.util.ArrayList;

/**
 * Stores the data from the API request meant to be displayed
 * later on by the JFrame window in SpotifyRestApiWindow
 * @author Matthew Bollinger
 *
 */
public class SpotifyArtistData {
	
	private int maxInserts; // Max number to be inserted into array list
	
	private ArrayList<String> artistNames = new ArrayList<>();
	private ArrayList<ArrayList<String>> artistGenres = new ArrayList<ArrayList<String>>();
	private ArrayList<Integer> artistFollowers = new ArrayList<>();
	private ArrayList<BufferedImage> artistImages = new ArrayList<>(); // Return BufferedImage to window class which gets casted to ImageIcon
	
	
	public SpotifyArtistData(SearchResult data) {
		setMaxInserts(data);
		setArtistValues(data);
	}

	private void setMaxInserts(SearchResult data) {
		int size = data.getArtists().getTotal();
		maxInserts = (size >= 5) ? 5 : size;
	}
	
	private void setArtistValues(SearchResult data) {
		setArtistNames(data);
		setArtistGenres(data);
		setArtistFollowers(data);
		setArtistImages(data);
	}
	
	private void setArtistNames(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			artistNames.add(data.getArtists().getItems()[i].getName());
		}
	}
	
	public ArrayList<String> getArtistNames() {
		return artistNames;
	}
	
	private void setArtistGenres(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			String[] genres = data.getArtists().getItems()[i].getGenres();
			ArrayList<String> singleArtistGenre = new ArrayList<>();
			for (String g : genres) {
				singleArtistGenre.add(g);
			}
			artistGenres.add(singleArtistGenre);
		}
	}
	
	public ArrayList<ArrayList<String>> getArtistGenres() {
		return artistGenres;
	}
	
	private void setArtistFollowers(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			artistFollowers.add(data.getArtists().getItems()[0].getFollowers().getTotal());
		}
	}
	
	public ArrayList<Integer> getArtistFollowers() {
		return artistFollowers;
	}
	
	private void setArtistImages(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			try {
				URL imageUrl = new URL(data.getArtists().getItems()[i].getImages()[0].getUrl());
				BufferedImage image = ImageIO.read(imageUrl);
				artistImages.add(image);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public ArrayList<BufferedImage> getArtistImages() {
		return artistImages;
	}
	
}
