package edu.psgv.sweng861;

import com.neovisionaries.i18n.CountryCode;
import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.credentials.ClientCredentials;
import com.wrapper.spotify.requests.authorization.client_credentials.ClientCredentialsRequest;
import com.wrapper.spotify.model_objects.special.SearchResult;
import com.wrapper.spotify.requests.data.artists.GetArtistsRelatedArtistsRequest;
import com.wrapper.spotify.requests.data.artists.GetArtistsTopTracksRequest;
import com.wrapper.spotify.requests.data.artists.GetSeveralArtistsRequest;
import com.wrapper.spotify.requests.data.search.SearchItemRequest;
import com.wrapper.spotify.requests.data.search.simplified.SearchArtistsRequest;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.Track;

import org.apache.hc.core5.http.ParseException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

public class SpotifyRestRequester {

	private static final String clientId = "b943ce1978d0450da72739cdd3fea06b";
	private static final String clientSecret = "c0381d85c81c4562b24ff69a1dfa11ee";

	private final SpotifyApi spotifyApi = new SpotifyApi.Builder().setClientId(clientId).setClientSecret(clientSecret)
			.build();

	public SpotifyRestRequester() {
		try {
			final ClientCredentialsRequest clientCredentialsRequest = spotifyApi.clientCredentials().build();
			final ClientCredentials clientCredentials = clientCredentialsRequest.execute();

			String accessToken = clientCredentials.getAccessToken();

			// Set access token for further "spotifyApi" object usage
			spotifyApi.setAccessToken(accessToken);

			// System.out.println("Expires in: " + clientCredentials.getExpiresIn());
		} catch (IOException | SpotifyWebApiException | ParseException e) { // Make more in depth exception catching
			System.out.println("Error: " + e.getMessage());
		}
	}

	public SpotifyArtistData searchArtist(String name) {
		try {
			final String artistName = name;
			final String type = ModelObjectType.ARTIST.getType();
			// Search using name and type with a limit of five results
			final SearchItemRequest searchArtistsRequest = spotifyApi.searchItem(artistName, type).limit(5).build();

			final SearchResult searchResult = searchArtistsRequest.execute();
			
			String[] searchIDs = new String[searchResult.getArtists().getItems().length];
			for (int i = 0; i < searchIDs.length; i++) {
				searchIDs[i] = searchResult.getArtists().getItems()[i].getId();
			}
			
			ArrayList<ArrayList<Artist>> relatedArtists = new ArrayList<ArrayList<Artist>>();
			ArrayList<ArrayList<Track>> topTracks = new ArrayList<ArrayList<Track>>();
			final CountryCode countryCode = CountryCode.SE;
			for (String id : searchIDs) {
				final GetArtistsRelatedArtistsRequest artistRelatedArtists = spotifyApi.getArtistsRelatedArtists(id).build();
				final GetArtistsTopTracksRequest artistsTopTracks = spotifyApi.getArtistsTopTracks(id, countryCode).build();
				final Artist[] artists = artistRelatedArtists.execute();
				final Track[] tracks = artistsTopTracks.execute();
				relatedArtists.add(new ArrayList<Artist>(Arrays.asList(artists)));
				topTracks.add(new ArrayList<Track>(Arrays.asList(tracks)));
			}

			SpotifyArtistData dataHolder = new SpotifyArtistData(searchResult, relatedArtists, topTracks);
			return dataHolder;
		} catch (IOException | SpotifyWebApiException | ParseException e) {
			System.out.println("Error: " + e.getMessage());
			return null;
		}
	}

	public SpotifyTrackData searchSong(String name) {
		try {
			final String songName = name;
			final String type = ModelObjectType.TRACK.getType();
			// Search using name and type with a limit of five results
			final SearchItemRequest searchArtistsRequest = spotifyApi.searchItem(songName, type).limit(5).build();

			final SearchResult searchResult = searchArtistsRequest.execute();

			SpotifyTrackData dataHolder = new SpotifyTrackData(searchResult);
			return dataHolder;
		} catch (IOException | SpotifyWebApiException | ParseException e) {
			System.out.println("Error: " + e.getMessage());
			return null;
		}
	}

}
