package edu.psgv.sweng861;

import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.credentials.ClientCredentials;
import com.wrapper.spotify.requests.authorization.client_credentials.ClientCredentialsRequest;
import com.wrapper.spotify.model_objects.special.SearchResult;
import com.wrapper.spotify.requests.data.search.SearchItemRequest;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.Paging;
import org.apache.hc.core5.http.ParseException;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;


public class SpotifyRestApiProject {
	
	private static final String clientId = "b943ce1978d0450da72739cdd3fea06b";
	private static final String clientSecret = "c0381d85c81c4562b24ff69a1dfa11ee";

	private static final SpotifyApi spotifyApi = new SpotifyApi.Builder().setClientId(clientId).setClientSecret(clientSecret).build();
	
	private static String[] artistNames = new String[5];
	private static String[][] artistGenres = new String[5][10];
	private static int[] artistFollowers = new int[5];
	private static BufferedImage[] artistImages = new BufferedImage[5]; // Return BufferedImage to window class which gets casted to ImageIcon
	
	private static String[] trackNames = new String[5];
	private static String[] trackAlbums = new String[5];
	private static String[] trackAlbumReleaseDates = new String[5];
	private static String[][] trackArtists = new String[5][10];
	private static int[] trackLengths = new int[5];
	private static String[] trackExplicits = new String[5];
	private static int[] trackDiscNumbers = new int[5];
	private static int[] trackTrkNumbers = new int[5];
	private static BufferedImage[] trackAlbumImages = new BufferedImage[5];	// Return BufferedImage to window class which gets casted to ImageIcon

	public static void getAccessToken() {
		try {
			final ClientCredentialsRequest clientCredentialsRequest = spotifyApi.clientCredentials().build();
			final ClientCredentials clientCredentials = clientCredentialsRequest.execute();
			
			String accessToken = clientCredentials.getAccessToken();

			// Set access token for further "spotifyApi" object usage
			spotifyApi.setAccessToken(accessToken);

			System.out.println("Expires in: " + clientCredentials.getExpiresIn());
		} catch (IOException | SpotifyWebApiException | ParseException e) { // Make more in depth exception catching
			System.out.println("Error: " + e.getMessage());
		}
	}

	/**
	 * Given the name input in by user as well as a newly created
	 * SpotifyRestApiData class, send data from request to
	 * SpotifyRestApiData as a SearchResult where it then stores
	 * the data
	 * @param name is the name of the artist meant to be searched
	 */
	public static void searchArtist(String name) {
		try {
			final String artistName = name;
			final String type = ModelObjectType.ARTIST.getType();

			final SearchItemRequest searchArtistsRequest = spotifyApi.searchItem(artistName, type).limit(5).build();

			final SearchResult searchResult = searchArtistsRequest.execute();
			
			System.out.println(searchResult.toString());

			System.out.println("Name: " + searchResult.getArtists().getItems()[0].getName());
			String[] genres = searchResult.getArtists().getItems()[0].getGenres();
			System.out.println("Genres Played In:");
			for (String g : genres) {
				System.out.println(g);
			}
			System.out.println("Image: " + searchResult.getArtists().getItems()[0].getImages()[0].getUrl());
			System.out.println("Number of Followers: " + searchResult.getArtists().getItems()[0].getFollowers().getTotal());
		} catch (IOException | SpotifyWebApiException | ParseException e) { // Make more in depth exception catching
			System.out.println("Error: " + e.getMessage());
		}
	}
	
	public static void searchSong(String name) {
		try {
			final String songName = name;
			final String type = ModelObjectType.TRACK.getType();
			// Search using name and type with a limit of five results
			final SearchItemRequest searchArtistsRequest = spotifyApi.searchItem(songName, type).limit(5).build();

			final SearchResult searchResult = searchArtistsRequest.execute();
			
			System.out.println(searchResult.toString());

			System.out.println("Name: " + searchResult.getTracks().getItems()[0].getName());
			System.out.println("Album: " + searchResult.getTracks().getItems()[0].getAlbum().getName());
			System.out.println("Album Release Date: " + searchResult.getTracks().getItems()[0].getAlbum().getReleaseDate());
			System.out.println("Album Image: " + searchResult.getTracks().getItems()[0].getAlbum().getImages()[0].getUrl());
			
			ArtistSimplified[] artists = searchResult.getTracks().getItems()[0].getArtists();
			System.out.println("Artists Involved:");
			for (ArtistSimplified a : artists) {
				System.out.println(a.getName());
			}
			
			System.out.println("Song Length: " + searchResult.getTracks().getItems()[0].getDurationMs());
			System.out.println("Song Explicit?: " + searchResult.getTracks().getItems()[0].getIsExplicit().toString());
			System.out.println("Song Disc Number: " + searchResult.getTracks().getItems()[0].getDiscNumber());
			System.out.println("Song Track Number: " + searchResult.getTracks().getItems()[0].getTrackNumber());
		} catch (IOException | SpotifyWebApiException | ParseException e) {	// Make more in depth exception catching
			System.out.println("Error: " + e.getMessage());
		}
	}

	public static void main(String[] args) {
		getAccessToken();
		searchArtist("Abba");
		System.out.println();
		searchSong("Mine Woman");
	}

}
