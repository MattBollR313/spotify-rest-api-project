package edu.psgv.sweng861;

import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.special.SearchResult;
import com.wrapper.spotify.requests.data.search.SearchItemRequest;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.Paging;
import org.apache.hc.core5.http.ParseException;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import java.util.ArrayList;

public class SpotifyTrackData {

	private int maxInserts = 5; // Max number to be inserted into array list

	private ArrayList<String> trackNames = new ArrayList<>();
	private ArrayList<String> trackAlbums = new ArrayList<>();
	private ArrayList<String> trackAlbumReleaseDates = new ArrayList<>();
	private ArrayList<ArrayList<String>> trackArtists = new ArrayList<ArrayList<String>>();
	private ArrayList<Integer> trackLengths = new ArrayList<>();
	private ArrayList<String> trackExplicits = new ArrayList<>();
	private ArrayList<Integer> trackDiscNumbers = new ArrayList<>();
	private ArrayList<Integer> trackTrkNumbers = new ArrayList<>();
	private ArrayList<String> trackPopularities = new ArrayList<>();
	// Return BufferedImage to window class which gets casted to ImageIcon
	private ArrayList<BufferedImage> trackAlbumImages = new ArrayList<>(); 

	public SpotifyTrackData(SearchResult data) {
		setMaxInserts(data);
		setTrackValues(data);
	}

	private void setMaxInserts(SearchResult data) {
		int size = data.getTracks().getTotal();
		maxInserts = (size >= 5) ? 5 : size;
	}

	private void setTrackValues(SearchResult data) {
		setTrackNames(data);
		setTrackAlbums(data);
		setTrackAlbumReleaseDates(data);
		setTrackArtists(data);
		setTrackLengths(data);
		setTrackExplicits(data);
		setTrackDiscNumbers(data);
		setTrackTrkNumbers(data);
		setTrackPopularities(data);
		setTrackAlbumImages(data);
	}

	private void setTrackNames(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackNames.add(data.getTracks().getItems()[i].getName());
		}
	}

	public ArrayList<String> getTrackNames() {
		return trackNames;
	}

	private void setTrackAlbums(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackAlbums.add(data.getTracks().getItems()[i].getAlbum().getName());
		}
	}

	public ArrayList<String> getTrackAlbums() {
		return trackAlbums;
	}

	private void setTrackAlbumReleaseDates(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackAlbumReleaseDates.add(data.getTracks().getItems()[i].getAlbum().getReleaseDate());
		}
	}

	public ArrayList<String> getTrackAlbumReleaseDates() {
		return trackAlbumReleaseDates;
	}

	private void setTrackArtists(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			ArtistSimplified[] artists = data.getTracks().getItems()[i].getArtists();
			ArrayList<String> singleTrackArtists = new ArrayList<>();
			for (ArtistSimplified a : artists) {
				singleTrackArtists.add(a.getName());
			}
			trackArtists.add(singleTrackArtists);
		}
	}

	public ArrayList<ArrayList<String>> getTrackArtists() {
		return trackArtists;
	}

	private void setTrackLengths(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackLengths.add(data.getTracks().getItems()[i].getDurationMs());
		}
	}

	public ArrayList<Integer> getTrackLengths() {
		return trackLengths;
	}

	private void setTrackExplicits(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			String isExplicit = data.getTracks().getItems()[i].getIsExplicit().toString();
			if (isExplicit.equals("true"))
				trackExplicits.add("Yes");
			else
				trackExplicits.add("No");
		}
	}

	public ArrayList<String> getTrackExplicits() {
		return trackExplicits;
	}

	private void setTrackDiscNumbers(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackDiscNumbers.add(data.getTracks().getItems()[i].getDiscNumber());
		}
	}

	public ArrayList<Integer> getTrackDiscNumbers() {
		return trackDiscNumbers;
	}

	private void setTrackTrkNumbers(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			trackTrkNumbers.add(data.getTracks().getItems()[i].getTrackNumber());
		}
	}

	public ArrayList<Integer> getTrackTrkNumbers() {
		return trackTrkNumbers;
	}
	
	private void setTrackPopularities(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			int pop = data.getTracks().getItems()[i].getPopularity();
			if (pop <= 20)
				trackPopularities.add("Not popular");
			else if (pop <= 40)
				trackPopularities.add("Not very popular");
			else if (pop <= 60)
				trackPopularities.add("Somewhat popular");
			else if (pop <= 80)
				trackPopularities.add("Popular");
			else
				trackPopularities.add("Very popular");
		}
	}
	
	public ArrayList<String> getTrackPopularities() {
		return trackPopularities;
	}

	private void setTrackAlbumImages(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			try {
				if (data.getTracks().getItems()[i].getAlbum().getImages().length != 0) {
					URL imageUrl = new URL(data.getTracks().getItems()[i].getAlbum().getImages()[0].getUrl());
					BufferedImage image = ImageIO.read(imageUrl);
					trackAlbumImages.add(image);
				} else
					trackAlbumImages.add(null);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public ArrayList<BufferedImage> getTrackAlbumImages() {
		return trackAlbumImages;
	}

}
