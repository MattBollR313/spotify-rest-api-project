package edu.psgv.sweng861;

import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.special.SearchResult;
import com.wrapper.spotify.requests.data.search.SearchItemRequest;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.Track;

import org.apache.hc.core5.http.ParseException;

import javax.swing.ImageIcon;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Stores the data from the API request meant to be displayed later on by the
 * JFrame window in SpotifyRestApiWindow
 * 
 * @author Matthew Bollinger
 *
 */
public class SpotifyArtistData {

	private int maxInserts; // Max number to be inserted into array list

	private ArrayList<String> artistNames = new ArrayList<>();
	private ArrayList<ArrayList<String>> artistGenres = new ArrayList<ArrayList<String>>();
	private ArrayList<Integer> artistFollowers = new ArrayList<>();
	// Return BufferedImage to window class which gets casted to ImageIcon
	private ArrayList<BufferedImage> artistImages = new ArrayList<>(); 
	private ArrayList<String> artistPopularities = new ArrayList<>();
	private ArrayList<ArrayList<String>> artistRelatedArtists = new ArrayList<>();
	private ArrayList<String> artistTopTracks = new ArrayList<>();

	public SpotifyArtistData(SearchResult data, ArrayList<ArrayList<Artist>> relatedArtists, ArrayList<ArrayList<Track>> topTracks) {
		setMaxInserts(data);
		setArtistValues(data, relatedArtists, topTracks);
	}

	private void setMaxInserts(SearchResult data) {
		int size = data.getArtists().getTotal();
		maxInserts = (size >= 5) ? 5 : size;
	}

	private void setArtistValues(SearchResult data, ArrayList<ArrayList<Artist>> relatedArtists, ArrayList<ArrayList<Track>> topTracks) {
		setArtistNames(data);
		setArtistGenres(data);
		setArtistFollowers(data);
		setArtistPopularities(data);
		setArtistRelatedArtists(relatedArtists);
		setArtistTopTracks(topTracks);
		setArtistImages(data);
	}

	private void setArtistNames(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			artistNames.add(data.getArtists().getItems()[i].getName());
		}
	}

	public ArrayList<String> getArtistNames() {
		return artistNames;
	}

	private void setArtistGenres(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			String[] genres = data.getArtists().getItems()[i].getGenres();
			ArrayList<String> singleArtistGenre = new ArrayList<>();
			for (String g : genres) {
				singleArtistGenre.add(g);
			}
			artistGenres.add(singleArtistGenre);
		}
	}

	public ArrayList<ArrayList<String>> getArtistGenres() {
		return artistGenres;
	}

	private void setArtistFollowers(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			artistFollowers.add(data.getArtists().getItems()[i].getFollowers().getTotal());
		}
	}

	public ArrayList<Integer> getArtistFollowers() {
		return artistFollowers;
	}
	
	private void setArtistPopularities(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			int pop = data.getArtists().getItems()[i].getPopularity();
			if (pop <= 20)
				artistPopularities.add("Not popular");
			else if (pop <= 40)
				artistPopularities.add("Not very popular");
			else if (pop <= 60)
				artistPopularities.add("Somewhat popular");
			else if (pop <= 80)
				artistPopularities.add("Popular");
			else
				artistPopularities.add("Very popular");
		}
	}
	
	public ArrayList<String> getArtistPopularities() {
		return artistPopularities;
	}
	
	private void setArtistRelatedArtists(ArrayList<ArrayList<Artist>> relatedArtists) {
		for (int i = 0; i < maxInserts; i++) {
			ArrayList<String> relatedArtistNames = new ArrayList<>();
			for (int j = 0; j < relatedArtists.get(i).size(); j++) {
				relatedArtistNames.add(relatedArtists.get(i).get(j).getName());
			}
			artistRelatedArtists.add(relatedArtistNames);
		}
	}
	
	public ArrayList<ArrayList<String>> getArtistRelatedArtists() {
		return artistRelatedArtists;
	}
	
	private void setArtistTopTracks(ArrayList<ArrayList<Track>> topTracks) {
		for (int i = 0; i < maxInserts; i++) {
			if (!topTracks.get(i).isEmpty())
				artistTopTracks.add(topTracks.get(i).get(0).getName());
			else
				artistTopTracks.add(null);
		}
	}
	
	public ArrayList<String> getArtistTopTracks() {
		return artistTopTracks;
	}

	private void setArtistImages(SearchResult data) {
		for (int i = 0; i < maxInserts; i++) {
			try {
				if (data.getArtists().getItems()[i].getImages().length != 0) {
					URL imageUrl = new URL(data.getArtists().getItems()[i].getImages()[0].getUrl());
					BufferedImage image = ImageIO.read(imageUrl);
					artistImages.add(image);
				} else
					artistImages.add(null);
			} catch (IIOException e) { 
				artistImages.add(null);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public ArrayList<BufferedImage> getArtistImages() {
		return artistImages;
	}
	
}
